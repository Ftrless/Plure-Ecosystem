plugins {
	id 'fabric-loom' version '1.8-SNAPSHOT'
	id 'maven-publish'
	id "com.diffplug.spotless" version "6.20.0"
}

static def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }

	project.dependencies {
		deps.each {
			api it
		}
	}
}

def getSubprojectVersion(project) {
	def version = project.properties["${project.name}_version"]

	if (!version) {
		throw new NullPointerException("Не удалось найти версию для модуля " + project.name)
	}

	return version
}

base {
	archivesName = project.archives_base_name
}

allprojects {
	group = project.archives_base_name

	apply plugin: "java-library"
	apply plugin: "fabric-loom"
	apply plugin: "com.diffplug.spotless"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 21
	}

	tasks.withType(GenerateModuleMetadata).configureEach {
		enabled = false
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"
	}

	tasks.withType(AbstractArchiveTask).configureEach {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	loom.runs.configureEach {
		vmArg("-enableassertions")
	}

	jar {
		from rootProject.file("LICENSE")
	}

	allprojects.each { p ->
		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
		}
	}

	repositories {
		maven { url "https://maven.architectury.dev/" }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url 'https://maven.nucleoid.xyz' }
		maven {
			url "https://maven.saps.dev/minecraft"
			content {
				includeGroup "dev.latvian.mods"
				includeGroup "dev.ftb.mods"
			}
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		modImplementation "me.lucko:fabric-permissions-api:0.3.1"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
		compileOnly annotationProcessor("org.projectlombok:lombok:1.18.30")
	}

	spotless {
		java {
			removeUnusedImports()
			importOrder('java', 'javax', '', 'net.minecraft', 'com.enthusiasm')
			indentWithSpaces()
			trimTrailingWhitespace()
		}
	}
}

loom {
	serverOnlyMinecraftJar()

	runs {
		server {
			ideConfigGenerated project.rootProject == project
		}
	}
}

subprojects {
	base {
		archivesName = project.name
	}
}

subprojects.each {
	remapJar.dependsOn("${it.path}:remapJar")
}

remapJar {
	addNestedDependencies = true
}

dependencies {
	afterEvaluate {
		(subprojects).forEach {
			def projectName = it.name
			api project(path: ":${projectName}", configuration: "namedElements")
			include project("${projectName}:")
		}
	}
}

tasks.register('createSubmodule') {
	doLast {
		Scanner scanner = new Scanner(System.in)
		println "\nВведите название модуля: "
		def moduleName = scanner.nextLine().trim()

		if (moduleName) {
			def newModuleName = "plure-${moduleName}"
			def newModuleId = "plure${moduleName}"
			def newName = "Plure ${moduleName.capitalize()}"

			def templateDir = file('template-module')
			if (!templateDir.exists()) {
				println "Шаблонная папка '${templateDir}' не существует. Убедитесь, что путь указан правильно."
				return
			}

			def destDir = file("./${newModuleName}")
			if (destDir.exists()) {
				println "Папка назначения '${destDir}' уже существует. Удалите её или используйте другое имя модуля."
				return
			}

			copy {
				from templateDir
				into destDir
			}

			if (!destDir.exists() || destDir.listFiles()?.size() <= 0) {
				println "Ошибка копирования. Проверьте права на запись и доступность директорий."
				return
			}

			def settingsFile = file('./settings.gradle')
			if (!settingsFile.exists()) {
				println "Файл 'settings.gradle' не найден. Убедитесь, что он существует в корне проекта."
				return
			}

			settingsFile.withWriterAppend { writer ->
				writer.writeLine("include '${newModuleName}'")
			}

			def gradleProperties = file('./gradle.properties')
			if (!gradleProperties.exists()) {
				println "Файл 'gradle.properties' не найден. Убедитесь, что он существует в корне проекта."
				return
			}

			gradleProperties.withWriterAppend { writer ->
				writer.writeLine("${newModuleName}_version=1.0.0")
			}

			def oldPackagePath = "com.enthusiasm.template"
			def newPackagePath = "com.enthusiasm.${newModuleId}"

			def oldEntryPoint = "TemplateEntrypoint"
			def newEntryPoint = "Plure${moduleName.capitalize()}Entrypoint"

			fileTree(destDir).matching {
				include '**/*.java'
			}.each { File file ->
				def content = file.text
				content = content.replaceAll(oldPackagePath, newPackagePath)
				content = content.replaceAll(oldEntryPoint, newEntryPoint)
				file.text = content

				if (file.name == oldEntryPoint) {
					def renamedFile = file.toPath().resolveSibling(newEntryPoint + ".java").toFile()
					file.renameTo(renamedFile)
				}
			}

			def oldPackageDir = file("${destDir}/src/main/java/com/enthusiasm/template")
			def newPackageDir = file("${destDir}/src/main/java/com/enthusiasm/${newModuleId}")
			if (oldPackageDir.exists()) {
				oldPackageDir.renameTo(newPackageDir)
			} else {
				println "Папка с пакетом '${oldPackageDir}' не найдена."
			}

			def fabricModFile = file("${destDir}/src/main/resources/fabric.mod.json")
			if (fabricModFile.exists()) {
				def fabricModContent = fabricModFile.text
				fabricModContent = fabricModContent.replaceAll('"id": "template"', '"id": "' + newModuleId + '"')
				fabricModContent = fabricModContent.replaceAll('"name": "Template Module"', '"name": "' + newName + '"')
				fabricModContent = fabricModContent.replaceAll('com.enthusiasm.template.TemplateEntrypoint', newPackagePath + '.' + newEntryPoint)
				fabricModFile.text = fabricModContent
			} else {
				println "Файл 'fabric.mod.json' не найден. Проверьте структуру шаблонного модуля."
			}

			println "Модуль '${newModuleName}' успешно создан и зарегистрирован."
		} else {
			println "Название модуля не может быть пустым."
		}
	}
}