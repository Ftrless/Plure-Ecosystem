plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

static def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }

	project.dependencies {
		deps.each {
			api it
		}
	}
}

def getSubprojectVersion(project) {
	def version = project.properties["${project.name}_version"]

	if (!version) {
		throw new NullPointerException("Could not find version for " + project.name)
	}

	return version
}

allprojects {
	group = project.maven_group

	apply plugin: "java-library"
	apply plugin: "fabric-loom"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 21
	}

	tasks.withType(GenerateModuleMetadata).configureEach {
		enabled = false
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"
	}

	tasks.withType(AbstractArchiveTask).configureEach {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	loom.runs.configureEach {
		vmArg("-enableassertions")
	}

	jar {
		from rootProject.file("LICENSE")
	}

	allprojects.each { p ->
		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
		}
	}

	repositories {
		maven { url "https://maven.architectury.dev/" }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		maven { url 'https://maven.nucleoid.xyz' }
		maven {
			url "https://maven.saps.dev/minecraft"
			content {
				includeGroup "dev.latvian.mods"
				includeGroup "dev.ftb.mods"
			}
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		include modImplementation("me.lucko:fabric-permissions-api:0.3.1")
		implementation "com.electronwill.night-config:toml:${project.nightconfig_version}"

		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	}
}

loom {
	runs {
		server {
			ideConfigGenerated project.rootProject == project
		}
	}
}

subprojects {
	base {
		archivesName = project.name
	}
}

subprojects.each {
	remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
	afterEvaluate {
		(subprojects).forEach {
			def projectName = it.name
			api project(path: ":${projectName}", configuration: "namedElements")
			include project("${projectName}:")
		}
	}
}